<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - demoaspcore</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/demoaspcore.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">demoaspcore</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - demoaspcore - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/ckeditor5-36.0.1-slcr1vss1cdi/build/ckeditor.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
		console.log("Hello");
		class MyUploadAdapter {
			constructor(loader) {
				this.loader = loader;
			}
			upload() {
				return this.loader.file.then(
					(file) =>
						new Promise((resolve, reject) => {
							this._initRequest();
							this._initListeners(resolve, reject, file);
							this._sendRequest(file);
						})
				);
			}

			// Aborts the upload process.
			abort() {
				if (this.xhr) {
					this.xhr.abort();
				}
			}

			_initRequest() {
				const xhr = (this.xhr = new XMLHttpRequest());
				xhr.open("POST", '@Url.Action("UpLoadFile","Home")', true);
				xhr.responseType = "json";
			}
			_initListeners(resolve, reject, file) {
				const xhr = this.xhr;
				const loader = this.loader;
				const genericErrorText = `Couldn't upload file: ${file.name}.`;

				xhr.addEventListener("error", () => reject(genericErrorText));
				xhr.addEventListener("abort", () => reject());
				xhr.addEventListener("load", () => {
					const response = xhr.response;

					// This example assumes the XHR server's "response" object will come with
					// an "error" which has its own "message" that can be passed to reject()
					// in the upload promise.
					//
					// Your integration may handle upload errors in a different way so make sure
					// it is done properly. The reject() function must be called when the upload fails.
					if (!response || response.error) {
						return reject(
							response && response.error
								? response.error.message
								: genericErrorText
						);
					}

					// If the upload is successful, resolve the upload promise with an object containing
					// at least the "default" URL, pointing to the image on the server.
					// This URL will be used to display the image in the content. Learn more in the
					// UploadAdapter#upload documentation.
					resolve({
						default: response.url,
					});
				});

				// Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
				// properties which are used e.g. to display the upload progress bar in the editor
				// user interface.
				if (xhr.upload) {
					xhr.upload.addEventListener("progress", (evt) => {
						if (evt.lengthComputable) {
							loader.uploadTotal = evt.total;
							loader.uploaded = evt.loaded;
						}
					});
				}
			}

			_sendRequest(file) {
				// Prepare the form data.
				const data = new FormData();

				data.append("upload", file);

				// Important note: This is the right place to implement security mechanisms
				// like authentication and CSRF protection. For instance, you can use
				// XMLHttpRequest.setRequestHeader() to set the request headers containing
				// the CSRF token generated earlier by your application.

				// Send the request.
				this.xhr.send(data);
			}
		}
		function MyCustomUploadAdapterPlugin(editor) {
			editor.plugins.get("FileRepository").createUploadAdapter = (loader) => {
				// Configure the URL to the upload script in your back-end here!
				return new MyUploadAdapter(loader);
			};
		}
		ClassicEditor.create(document.querySelector('#editor'), {
				extraPlugins: [MyCustomUploadAdapterPlugin],
			})
            .then(editor => {
                console.log(editor);
            })
            .catch(error => {
                console.error(error);
            });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
