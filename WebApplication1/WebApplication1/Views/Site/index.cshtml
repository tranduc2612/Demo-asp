@model WebApplication1.Models.User
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@ViewBag.name

@using (Html.BeginForm("Index", "Site"))
{


    <div class="form-horizontal">
        <div>
            @Html.LabelFor(m => m.name, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(m => m.name, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.name, "", new { @class = "text-danger" })
        </div>

        <div>
            @Html.LabelFor(m => m.password, htmlAttributes: new { @class = "control-label mt-5" })
            @Html.TextBoxFor(m => m.password, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.password, "", new { @class = "text-danger" })
        </div>

        <textarea name="content" id="editor">This is some sample content.</textarea>

        <input class="btn btn-primary" type="submit" value="Login" />


    </div>
}

@section ckeditorJS{
   
    <script language="JavaScript" type="text/javascript">
         class MyUploadAdapter {
			constructor(loader) {
				this.loader = loader;
			}
			upload() {
				return this.loader.file.then(
					(file) =>
						new Promise((resolve, reject) => {
							this._initRequest();
							this._initListeners(resolve, reject, file);
							this._sendRequest(file);
						})
				);
			}

			// Aborts the upload process.
			abort() {
				if (this.xhr) {
					this.xhr.abort();
				}
			}

			_initRequest() {
				const xhr = (this.xhr = new XMLHttpRequest());

				xhr.open("POST", '@Url.Action("UpLoadFile","Site")', true);
				xhr.responseType = "json";
			}
			_initListeners(resolve, reject, file) {
				const xhr = this.xhr;
				const loader = this.loader;
				const genericErrorText = `Couldn't upload file: ${file.name}.`;

				xhr.addEventListener("error", () => reject(genericErrorText));
				xhr.addEventListener("abort", () => reject());
				xhr.addEventListener("load", () => {
					const response = xhr.response;

					// This example assumes the XHR server's "response" object will come with
					// an "error" which has its own "message" that can be passed to reject()
					// in the upload promise.
					//
					// Your integration may handle upload errors in a different way so make sure
					// it is done properly. The reject() function must be called when the upload fails.
					if (!response || response.error) {
						return reject(
							response && response.error
								? response.error.message
								: genericErrorText
						);
					}

					// If the upload is successful, resolve the upload promise with an object containing
					// at least the "default" URL, pointing to the image on the server.
					// This URL will be used to display the image in the content. Learn more in the
					// UploadAdapter#upload documentation.
					resolve({
						default: response.url,
					});
				});

				// Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
				// properties which are used e.g. to display the upload progress bar in the editor
				// user interface.
				if (xhr.upload) {
					xhr.upload.addEventListener("progress", (evt) => {
						if (evt.lengthComputable) {
							loader.uploadTotal = evt.total;
							loader.uploaded = evt.loaded;
						}
					});
				}
			}

			_sendRequest(file) {
				// Prepare the form data.
				const data = new FormData();

				data.append("upload", file);

				// Important note: This is the right place to implement security mechanisms
				// like authentication and CSRF protection. For instance, you can use
				// XMLHttpRequest.setRequestHeader() to set the request headers containing
				// the CSRF token generated earlier by your application.

				// Send the request.
				this.xhr.send(data);
			}
		}
		function MyCustomUploadAdapterPlugin(editor) {
			editor.plugins.get("FileRepository").createUploadAdapter = (loader) => {
				// Configure the URL to the upload script in your back-end here!
				return new MyUploadAdapter(loader);
			};
		}

        ClassicEditor.create(document.querySelector('#editor'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
            .then(editor => {
                console.log(editor);
            })
            .catch(error => {
                console.error(error);
            });
    </script>



}




